type Account {
  id: String!
  wallet: String
  debit: String
  credit: String
}

input AccountWhereInput {
  id: String
  wallet: String
}

type Query {
  balance(where: AccountWhereInput): Account
  actions(where: ActionWhereInput, take: Int, skip: Int, gt: ActionWhereInput, lt: ActionWhereInput, like: ActionWhereInput, orderBy: [JSONObject]): Actions
  action(where: ActionWhereInput): Action
  addresses(where: AddressWhereInput, take: Int, skip: Int, gt: AddressWhereInput, lt: AddressWhereInput, like: AddressWhereInput, orderBy: [JSONObject]): Addresses
  address(where: AddressWhereInput): Address
  assets(where: AssetWhereInput, take: Int, skip: Int, gt: AssetWhereInput, lt: AssetWhereInput, like: AssetWhereInput, orderBy: [JSONObject]): Assets
  asset(where: AssetWhereInput): Asset
  blocks(where: BlockWhereInput, take: Int, skip: Int, gt: BlockWhereInput, lt: BlockWhereInput, like: BlockWhereInput, orderBy: [JSONObject]): Blocks
  block(where: BlockWhereInput): Block
  collaterals(where: CollateralWhereInput, take: Int, skip: Int, gt: CollateralWhereInput, lt: ActionWhereInput, like: ActionWhereInput, orderBy: [JSONObject]): Actions
  collateral(where: ActionWhereInput): Collateral
  escrows(where: EscrowWhereInput, take: Int, skip: Int, gt: EscrowWhereInput, lt: EscrowWhereInput, like: EscrowWhereInput, orderBy: [JSONObject]): Escrows
  escrow(where: EscrowWhereInput): Escrow
  fee(where: FeeWhereInput): Fee
  flows(where: FlowWhereInput, take: Int, skip: Int, gt: FlowWhereInput, lt: FlowWhereInput, like: FlowWhereInput, orderBy: [JSONObject]): Flows
  flow(where: FlowWhereInput): Flow
  key(where: KeyWhereInput): Key
  legs(where: LegWhereInput, take: Int, skip: Int, gt: LegWhereInput, lt: LegWhereInput, like: LegWhereInput, orderBy: [JSONObject]): Legs
  leg(where: LegWhereInput): Leg
  tvl(where: LiquidityWhereInput, lt: LiquidityWhereInput): Liquidity
  organizations(where: OrganizationWhereInput, take: Int, skip: Int, gt: OrganizationWhereInput, lt: OrganizationWhereInput, like: OrganizationWhereInput, orderBy: [JSONObject]): Organizations
  organization(where: OrganizationWhereInput): Organization
  outcomes(where: OutcomeWhereInput, take: Int, skip: Int, gt: OutcomeWhereInput, lt: OutcomeWhereInput, like: OutcomeWhereInput, orderBy: [JSONObject]): Outcomes
  outcome(where: OutcomeWhereInput): Outcome
  products(where: ProductWhereInput, take: Int, skip: Int, gt: ProductWhereInput, lt: ProductWhereInput, like: ProductWhereInput, orderBy: [JSONObject]): Products
  product(where: ProductWhereInput): Product
  transactions(where: TransactionWhereInput, take: Int, skip: Int, gt: TransactionWhereInput, lt: TransactionWhereInput, like: TransactionWhereInput, orderBy: [JSONObject]): Transactions
  transaction(where: TransactionWhereInput): Transaction
  users(where: UserWhereInput, take: Int, skip: Int, like: JSONObject): Users
  user(where: UserWhereInput): User
  profile: User
  webhooks(where: WebhookWhereInput, take: Int, skip: Int, gt: WebhookWhereInput, lt: WebhookWhereInput, like: WebhookWhereInput, orderBy: [JSONObject]): Webhooks
  webhook(where: WebhookWhereInput): Webhook
}

type Subscription {
  balanceUpdated(where: AccountWhereInput): Account
}

type Action {
  id: String!
  type: String
  configuration: JSONObject
}

type Actions {
  data: [Action]
  count: Int
}

input ActionWhereInput {
  id: String
  type: String
  configuration: JSONObject
}

input ActionDataInput {
  id: String
  type: String
  configuration: JSONObject
}

type Mutation {
  createAction(data: ActionDataInput): Action
  updateAction(where: ActionWhereInput, data: ActionDataInput): Action
  executeAction(where: ActionWhereInput): Action
  createAddress(data: AddressDataInput): Address
  updateAddress(data: AddressDataInput, where: AddressWhereInput): Address
  createAsset(data: AssetDataInput): Asset
  updateAsset(data: AssetDataInput, where: AssetWhereInput): Asset
  indexBlock(where: BlockWhereInput): Block
  createCollateral(data: CollateralDataInput): Collateral
  updateCollateral(where: CollateralWhereInput, data: CollateralDataInput): Collateral
  createEscrow(data: EscrowDataInput): Escrow
  updateEscrow(where: EscrowWhereInput, data: EscrowDataInput): Escrow
  broadcastEscrow(data: EscrowDataInput): Escrow
  executeEscrow(where: EscrowWhereInput): Escrow
  executeFlow(where: JSONObject, data: JSONObject): Flow
  createOrganization(data: OrganizationDataInput): Organization
  updateOrganization(data: OrganizationDataInput, where: OrganizationWhereInput): Organization
  createOutcome(data: OutcomeDataInput): Outcome
  checkOutcome(where: OutcomeWhereInput): Outcome
  sign(where: OutcomeWhereInput): Outcome
  createProduct(data: ProductDataInput): Product
  buildSignature(where: SignatureWhereInput): Signature
  executeSignature(where: SignatureWhereInput, data: SignatureDataInput): Signature
  updateTransaction(where: TransactionWhereInput, data: TransactionDataInput): Transaction
  addUser(data: UserDataInput): User
  updateUser(where: UserWhereInput, data: UserDataInput): User
  deleteUser(where: UserWhereInput): User
  createWebhook(data: WebhookDataInput): Webhook
  updateWebhook(data: WebhookDataInput, where: WebhookWhereInput): Webhook
}

type Address {
  id: String!
  value: String
  publicKey: String
  type: String
  meta: JSONObject
  escrow: Escrow
}

type Addresses {
  data: [Address]
  count: Int
}

input AddressWhereInput {
  id: String
  value: String
  publicKey: String
  type: String
  meta: JSONObject
  escrow: EscrowWhereInput
}

input AddressDataInput {
  id: String
  value: String
  publicKey: String
  type: String
  meta: JSONObject
  escrow: EscrowDataInput
}

type Meta {
  amount: String
}

input MetaWhereInput {
  amount: String
}

input MetaDataInput {
  amount: String
}

type Content {
  meta: JSONObject
  node: JSONObject
}

input ContentWhereInput {
  meta: JSONObject
  node: JSONObject
}

input ContentDataInput {
  meta: JSONObject
  node: JSONObject
}

type Asset {
  id: String!
  type: String
  usdValue: String
  content: Content
  collateral: Collateral
  addresses: [Address]
  action: Action
}

type Assets {
  data: [Asset]
  count: Int
}

input AssetWhereInput {
  id: String
  type: String
  usdValue: String
  content: ContentWhereInput
  collateral: CollateralWhereInput
  addresses: [AddressWhereInput]
  action: ActionWhereInput
}

input AssetDataInput {
  id: String
  type: String
  usdValue: String
  content: ContentDataInput
  collateral: CollateralDataInput
  addresses: [AddressDataInput]
  action: ActionDataInput
}

type Block {
  id: String
  indexed: Boolean
}

type Blocks {
  data: [Block]
  count: Int
}

input BlockWhereInput {
  id: String
  indexed: Boolean
}

input BlockDataInput {
  id: String
}

type Collateral {
  id: String!
  assets: [Asset]
  escrow: Escrow
}

type Collaterals {
  data: [Collateral]
  count: Int
}

input CollateralWhereInput {
  id: String
  assets: [AssetWhereInput]
  escrow: EscrowWhereInput
}

input CollateralDataInput {
  id: String
  assets: [AssetDataInput]
  escrow: EscrowDataInput
}

type Condition {
  id: ID
  filter: JSONObject
  module: String
  outcome: Outcome
  transaction: Transaction
  verification: Verification
}

type Conditions {
  data: [Condition]
  count: Int!
}

input ConditionWhereInput {
  id: ID
  filter: JSONObject
  module: String
  outcome: OutcomeWhereInput
  verification: VerificationWhereInput
}

input ConditionDataInput {
  id: ID
  filter: JSONObject
  module: String
  outcome: OutcomeWhereInput
  transaction: TransactionDataInput
  verification: VerificationDataInput
}

type Escrow {
  id: String!
  startDate: String
  endDate: String
  status: String
  collateral: Collateral
  meta: JSONObject
  transactions: [Transaction]
  sides: [Side]
  product: Product
}

type Escrows {
  data: [Escrow]
  count: Int
}

input EscrowWhereInput {
  id: String
  startDate: String
  endDate: String
  status: String
  collateral: CollateralWhereInput
  transactions: [TransactionWhereInput]
  organization: OrganizationWhereInput
  product: ProductWhereInput
}

input EscrowDataInput {
  id: String
  startDate: String
  endDate: String
  status: String
  meta: JSONObject
  collateral: CollateralDataInput
  transactions: [TransactionDataInput]
  product: ProductDataInput
}

type Fee {
  value: String
  escrow: Escrow
}

input FeeWhereInput {
  value: String
  escrow: EscrowWhereInput
}

type Flow {
  id: String!
  escrows: [Escrow]
  step: JSONObject
}

type Flows {
  data: [Flow]
  count: Int
}

input FlowWhereInput {
  id: String
}

input FlowDataInput {
  id: String
}

type Key {
  id: ID!
  value: String
  organization: Organization
  product: Product
}

input KeyWhereInput {
  id: ID
  value: String
  organization: OrganizationWhereInput
  product: ProductWhereInput
}

input KeyDataInput {
  id: ID
  value: String
  organization: OrganizationDataInput
  product: ProductDataInput
}

type Leg {
  id: String!
  startDate: String
  endDate: String
  type: String
  nature: String
  activationDate: String
  address: String
  value: String
}

type Legs {
  data: [Leg]
  count: Int
}

input LegWhereInput {
  id: String
  startDate: String
  endDate: String
  type: String
  nature: String
  activationDate: String
  address: String
  value: String
}

type Liquidity {
  id: Int
  amount: String
  escrow: Escrow
  organization: Organization
}

input LiquidityWhereInput {
  id: Int
  amount: String
  escrow: EscrowWhereInput
  organization: OrganizationWhereInput
}

type Organization {
  id: String!
  name: String
  logo: String
  webhooks: [Webhook]
}

type Organizations {
  data: [Organization]
  count: Int
}

input OrganizationWhereInput {
  id: String
  name: String
  logo: String
  webhooks: [WebhookWhereInput]
}

input OrganizationDataInput {
  id: String
  name: String
  logo: String
  webhooks: [WebhookWhereInput]
}

type Outcome {
  id: String
  description: String
  tag: String
  conditions: [Condition]
  signature: Signature
  block: Block
}

type Outcomes {
  data: [Outcome]
  count: Int
}

input OutcomeWhereInput {
  id: String
  description: String
  tag: String
  conditions: [ConditionWhereInput]
  block: BlockWhereInput
  signature: SignatureWhereInput
  OR: [OutcomeWhereInput]
}

input OutcomeDataInput {
  id: String
  description: String
  tag: String
  conditions: [ConditionDataInput]
  OR: [OutcomeDataInput]
}

type Party {
  id: String!
  address: String
  publicKey: String
  input: String
  collateral: String
  funding: JSONObject
  change: JSONObject
  final: JSONObject
}

type Partys {
  data: [Party]
  count: Int
}

input PartyWhereInput {
  id: String
  address: String
  publicKey: String
  input: String
  collateral: String
  funding: JSONObject
  change: JSONObject
  final: JSONObject
}

input PartyDataInput {
  id: String
  address: String
  publicKey: String
  input: String
  collateral: String
  funding: JSONObject
  change: JSONObject
  final: JSONObject
}

type Product {
  id: String
  name: String
  type: String
  key: Key
}

type Products {
  data: [Product]
  count: Int
}

input ProductWhereInput {
  id: String
  name: String
  type: String
  key: KeyWhereInput
}

input ProductDataInput {
  id: String
  name: String
  type: String
  key: KeyDataInput
}

scalar DateTime

scalar EmailAddress

scalar PhoneNumber

scalar URL

scalar JSONObject

type Side {
  id: String
  movement: String
  action: String
  leaf: String
}

type Signature {
  publicKey: String
  wif: String
}

type Signatures {
  data: [Signature]
  count: Int
}

input SignatureWhereInput {
  publicKey: String
  wif: String
  OR: [SignatureWhereInput]
  escrow: JSONObject
}

input SignatureDataInput {
  publicKey: String
  wif: String
  transactions: [TransactionDataInput]
  escrow: JSONObject
}

type Transaction {
  id: String
  hex: String
  type: String
  base64: String
  txid: String
  inputs: Int
  outputs: Int
}

type Transactions {
  data: [Transaction]
  count: Int
}

input TransactionWhereInput {
  id: String
  hex: String
  type: String
  base64: String
  txid: String
  inputs: Int
  outputs: Int
}

input TransactionDataInput {
  id: String
  hex: String
  type: String
  base64: String
  txid: String
  inputs: Int
  outputs: Int
}

type User {
  id: ID!
  lastname: String
  firstname: String
  birthDate: String
  createdDate: String
  updatedDate: String
  gender: String
  email: String
  phone: String
  meta: JSONObject
  organization: Organization
}

input UserWhereInput {
  id: ID
  password: String
  email: String
  phone: String
  lastname: String
  firstname: String
  meta: JSONObject
  birthDate: String
  gender: String
  organization: OrganizationWhereInput
}

input UserDataInput {
  id: ID
  firstname: String
  lastname: String
  email: String
  phone: String
  meta: JSONObject
  birthDate: String
  gender: String
}

input UserCronParamsInput {
  data: UserWhereInput
  type: String
}

input UserCronInput {
  interval: String
  type: String
  once: Boolean
  params: UserCronParamsInput
}

type Users {
  data: [User!]!
  count: Int!
}

type Verification {
  id: ID
  leftOperand: JSONObject
  rightOperand: JSONObject
  operation: String
  condition: Condition
}

type Verifications {
  data: [Verification]
  count: Int!
}

input VerificationWhereInput {
  id: ID
  leftOperand: JSONObject
  rightOperand: JSONObject
  operation: String
  condition: ConditionWhereInput
}

input VerificationDataInput {
  id: ID
  leftOperand: JSONObject
  rightOperand: JSONObject
  operation: String
  condition: ConditionDataInput
}

type Webhook {
  id: String!
  name: String
  description: String
  url: String
  organization: Organization
}

type Webhooks {
  data: [Webhook]
  count: Int
}

input WebhookWhereInput {
  id: String
  name: String
  description: String
  url: String
  organization: OrganizationWhereInput
}

input WebhookDataInput {
  id: String
  name: String
  description: String
  url: String
  organization: OrganizationWhereInput
}
